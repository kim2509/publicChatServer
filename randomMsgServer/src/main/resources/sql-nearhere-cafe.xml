<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tessoft.nearhere.cafe">

	<select id="searchCafe" resultType="HashMap" parameterType="HashMap">
		select cm.*, cd.mainDesc, concat(ifnull(ci.url1,''), ifnull(ci.url2,'')) as iconImageURL, cmm.cntMembers
			, rv.*
		from cafe_master cm
			left outer join cafe_detail cd on cm.cafeNo=cd.cafeNo
			left outer join cafe_image ci on ci.imageNo = cd.iconImageNo
			left outer join ( select cafeNo, count(cafeNo) as cntMembers from cafe_members group by cafeNo ) cmm on cm.cafeNo = cmm.cafeNo
			left outer join cafe_location cl on cd.locationNo = cl.No
			left outer join region_view rv on cl.regionNo = rv.regionNo
		where cafeName like concat('%',#{keyword},'%') and cm.publishYN = 'Y'
		<if test="level != null and level==1">
			and rv.lRegionNo = #{regionNo}
		</if>
		<if test="level != null and level==2">
			and rv.mRegionNo = #{regionNo}
		</if>
		<if test="level != null and level==3">
			and rv.sRegionNo = #{regionNo}
		</if>
		<if test="level != null and level==4">
			and rv.tRegionNo = #{regionNo}
		</if>
		limit #{startIndex}, #{showCount}
	</select>
	
	<select id="searchCafeCount" resultType="Integer" parameterType="HashMap">
		select count(cm.cafeNo) as cntCafes
		from cafe_master cm
			left outer join cafe_detail cd on cm.cafeNo=cd.cafeNo
			left outer join cafe_location cl on cd.locationNo = cl.No
			left outer join region_view rv on cl.regionNo = rv.regionNo
		where cafeName like concat('%',#{keyword},'%') and cm.publishYN = 'Y'
		<if test="level != null and level==1">
			and rv.lRegionNo = #{regionNo}
		</if>
		<if test="level != null and level==2">
			and rv.mRegionNo = #{regionNo}
		</if>
		<if test="level != null and level==3">
			and rv.sRegionNo = #{regionNo}
		</if>
		<if test="level != null and level==4">
			and rv.tRegionNo = #{regionNo}
		</if>
	</select>
	
	<select id="searchCafePosts" resultType="HashMap" parameterType="HashMap">
		select cbm.boardName, cbpm.*, cbpd.content, cbpd2.locationNo, rv.* 
			, concat( ifnull( ci.url1, '' ), ifnull( ci.url2, '' ) ) as imageURL
		from cafe_board_post_master cbpm
			left outer join (
				select postNo, content from cafe_board_post_detail
				where type = 1
				group by postNo
			) cbpd on cbpm.postNo = cbpd.postNo
			left outer join (
				select postNo, locationNo from cafe_board_post_detail
				where type = 3
				group by postNo
			) cbpd2 on cbpm.postNo = cbpd2.postNo
			left outer join cafe_location cl on cbpd2.locationNo=cl.No
			left outer join region_view rv on rv.regionNo = cl.regionNo
			left outer join (
				select postNo, imageNo from cafe_board_post_detail
				where type = 2
				group by postNo
			) cbpd3 on cbpm.postNo = cbpd3.postNo
			left outer join cafe_image ci on ci.imageNo = cbpd3.imageNo
			left outer join cafe_board_master cbm on cbm.boardNo=cbpm.boardNo
		where 
		(cbpm.title like concat('%',#{keyword},'%') or cbpd.content like concat('%',#{keyword},'%'))
		and cbpm.noticeYN &lt;&gt; 'Y'
		<if test="level==1">
			and rv.lRegionNo = #{regionNo}
		</if>
		<if test="level==2">
			and rv.mRegionNo = #{regionNo}
		</if>
		<if test="level==3">
			and rv.sRegionNo = #{regionNo}
		</if>
		<if test="level==4">
			and rv.tRegionNo = #{regionNo}
		</if>
		limit #{startIndex}, #{showCount}
	</select>
	
	<select id="searchCafePostsCount" resultType="Integer" parameterType="HashMap">
		select count(cbpm.postNo)
		from cafe_board_post_master cbpm
			left outer join (
				select postNo, content from cafe_board_post_detail
				where type = 1
				group by postNo
			) cbpd on cbpm.postNo = cbpd.postNo
			left outer join (
				select postNo, locationNo from cafe_board_post_detail
				where type = 3
				group by postNo
			) cbpd2 on cbpm.postNo = cbpd2.postNo
			left outer join cafe_location cl on cbpd2.locationNo=cl.No
			left outer join region_view rv on rv.regionNo = cl.regionNo
		where 
		(cbpm.title like concat('%',#{keyword},'%') or cbpd.content like concat('%',#{keyword},'%'))
		and cbpm.noticeYN &lt;&gt; 'Y'
		<if test="level==1">
			and rv.lRegionNo = #{regionNo}
		</if>
		<if test="level==2">
			and rv.mRegionNo = #{regionNo}
		</if>
		<if test="level==3">
			and rv.sRegionNo = #{regionNo}
		</if>
		<if test="level==4">
			and rv.tRegionNo = #{regionNo}
		</if>
	</select>
	
	<select id="getMyCafeList" resultType="HashMap" parameterType="String">
		select cm.*, ifnull(ci.url1,'') as url1, ifnull(ci.url2,'') as url2 
		from cafe_members cm2
			left outer join cafe_master cm on cm.cafeNo=cm2.cafeNo
			left outer join cafe_detail cd on cm.cafeNo=cd.cafeNo
			left outer join cafe_image ci on ci.imageNo = cd.iconImageNo
		where cm2.userID=#{userID} and cm.publishYN='Y'
		union
		select cm.*, ifnull(ci.url1,'') as url1, ifnull(ci.url2,'') as url2 
		from cafe_master cm
			left outer join cafe_detail cd on cm.cafeNo=cd.cafeNo
			left outer join cafe_image ci on ci.imageNo = cd.iconImageNo
		where cm.owner=#{userID}
	</select>
	
	<select id="getCafeMeetingsInMyFavRegion" resultType="HashMap" parameterType="String">
		select cpm.meetingNo, cpm.title, cpm.meetingDate, cpm.maxNo, ifnull(cmm.curNo,0) as curNo, cpm.createdDate, 
			rv.*, cm.cafeID, cm.cafeName, cl.address
		from cafe_public_meeting cpm
			left outer join cafe_location cl on cpm.locationNo = cl.No
			left outer join region_view rv on rv.regionNo = cl.regionNo
			left outer join user_favorite_region ur on ur.regionNo = rv.regionNo
			left outer join cafe_master cm on cpm.cafeNo=cm.cafeNo
			left outer join (select meetingNo, count(userID) as curNo from cafe_public_meeting_members group by meetingNo ) cmm
				on cpm.meetingNo = cmm.meetingNo
		where ur.userID = #{userID}
		and cpm.meetingDate > NOW()
		order by cpm.meetingDate desc
		limit 0, 5;
	</select>
	
	<select id="getCafeMeetingsByRegion" resultType="HashMap" parameterType="HashMap">
		select cpm.meetingNo, cpm.title, cpm.meetingDate, cpm.maxNo, ifnull(cmm.curNo,0) as curNo, cpm.createdDate,  
			rv.*, cm.cafeID, cm.cafeName, cl.latitude, cl.longitude, cl.address 
		from cafe_public_meeting cpm
			left outer join cafe_location cl on cpm.locationNo=cl.No
			left outer join region_view rv on rv.regionNo=cl.regionNo
			left outer join cafe_master cm on cm.cafeNo=cpm.cafeNo
			left outer join (select meetingNo, count(userID) as curNo from cafe_public_meeting_members group by meetingNo ) cmm
				on cpm.meetingNo = cmm.meetingNo
		where 
		<if test="level==1">
			lRegionNo = #{regionNo}
		</if>
		<if test="level==2">
			mRegionNo = #{regionNo}
		</if>
		<if test="level==3">
			sRegionNo = #{regionNo}
		</if>
		<if test="level==4">
			tRegionNo = #{regionNo}
		</if>
		limit #{startIndex}, #{showCount}
	</select>
	
	<select id="getTotalCafeMeetingsCountByRegion" resultType="Integer" parameterType="HashMap">
		select count(cpm.meetingNo) as totalItemCount
		from cafe_public_meeting cpm
			left outer join cafe_location cl on cpm.locationNo=cl.No
			left outer join region_view rv on rv.regionNo=cl.regionNo
		where 
		<if test="level==1">
			lRegionNo = #{regionNo}
		</if>
		<if test="level==2">
			mRegionNo = #{regionNo}
		</if>
		<if test="level==3">
			sRegionNo = #{regionNo}
		</if>
		<if test="level==4">
			tRegionNo = #{regionNo}
		</if>
	</select>
	
	<select id="getUpcomingCafeMeetingList" resultType="HashMap" parameterType="String">
		select cp.*, cm.cafeID, cm.cafeName, cl.lRegionNo,cl.mRegionNo, cl.sRegionNo, cl.tRegionNo from cafe_public_meeting cp
			left outer join cafe_location cl on cp.locationNo=cl.No
			left outer join cafe_master cm on cp.cafeNo=cm.cafeNo
		where cp.meetingDate >= NOW() 
		order by cp.meetingDate
	</select>
	
	<select id="getCafePublicMeetingList" resultType="HashMap" parameterType="HashMap">
		select cp.*, cm.cafeName, cm.cafeID, cl.regionNo from cafe_public_meeting cp
			left outer join cafe_location cl on cp.locationNo=cl.No
			left outer join cafe_master cm on cp.cafeNo=cm.cafeNo
		where cp.meetingDate >= NOW()
		and cm.cafeID=#{cafeID}
	</select>
	
	<insert id="makeCafe" parameterType="HashMap"
		useGeneratedKeys="true" keyProperty="cafeNo" keyColumn="cafeNo">
		insert into cafe_master( cafeID, cafeName, owner, createdDate )
		values( #{cafeID}, #{cafeName}, #{userID}, NOW() );
		<selectKey keyProperty="cafeNo" resultType="String" order="AFTER">
			select LAST_INSERT_ID();
		</selectKey>
	</insert>
	
	<insert id="insertCafeDetail" parameterType="HashMap">
		insert into cafe_detail( cafeNo, iconImageNo, mainImageNo, mainDesc, locationNo, contactEmail)
		values( #{cafeNo}, #{iconImageNo}, #{mainImageNo}, #{mainDesc}, #{locationNo}, #{contactEmail} );
	</insert>
	
	<insert id="insertCafeLocation" parameterType="HashMap"
		useGeneratedKeys="true" keyProperty="locationNo" keyColumn="locationNo">
		insert into cafe_location( type, latitude, longitude, regionNo, address, createdDate )
		values( #{locationType}, #{latitude}, #{longitude}, #{regionNo}, #{address}, NOW() );
		<selectKey keyProperty="locationNo" resultType="String" order="AFTER">
			select LAST_INSERT_ID();
		</selectKey>
	</insert>
	
	<insert id="updateCafeLocation" parameterType="HashMap">
		update cafe_location
		set type=#{locationType}
		, latitude=#{latitude}
		, longitude=#{longitude}
		, regionNo=#{regionNo}
		, address=#{address}
		where No = #{locationNo}
	</insert>
	
	<select id="getCafeMainInfo" resultType="HashMap" parameterType="HashMap">
		select cm.*, cd.iconImageNo, cd.mainImageNo
			, ifnull(cd.mainDesc,'') as mainDesc
			, ifnull(ci.url1,'') as url1, ifnull(ci.url2,'') as url2
			, cd.contactEmail
			, cd.locationNo as cafeLocationNo
			, cl.type as cafeLocationType
			, cl.latitude as cafeLatitude
			, cl.longitude as cafeLongitude
			, cl.regionNo as cafeRegionNo
			, cl.address as cafeAddress
			, rv.lRegionNo
			, rv.mRegionNo
			, rv.sRegionNo
			, rv.tRegionNo
		from cafe_master cm
			left outer join cafe_detail cd on cm.cafeNo=cd.cafeNo
			left outer join cafe_image ci on cd.mainImageNo = ci.imageNo
			left outer join cafe_location cl on cl.No = cd.locationNo
			left outer join region_view rv on rv.regionNo = cl.regionNo 
		where cafeID=#{cafeID}
	</select>
	
	<select id="getCafeMeetingInfo" resultType="HashMap" parameterType="HashMap">
		select cm.meetingNo, cm.cafeNo, cm.title, cm.meetingDate, cl.latitude, cl.longitude, cl.address, ifnull(cm.maxNo, 0 ) as maxNo
			, ifnull(cmm.curNo,0) as curNo
		from cafe_public_meeting cm
			left outer join (select meetingNo, count(userID) as curNo from cafe_public_meeting_members group by meetingNo ) cmm
				on cm.meetingNo = cmm.meetingNo
			left outer join cafe_location cl on cl.No=cm.locationNo
		where cm.meetingNo=#{meetingNo}
	</select>
	
	<select id="getCafeMeetingMembers" resultType="HashMap" parameterType="HashMap">
		select cm.*, u.userName, u.profileImageURL, cm2.memberType
		from cafe_public_meeting_members cm
			left outer join user u on u.userID=cm.userID
			left outer join cafe_members cm2 on cm.userID=cm2.userID
		where cm.meetingNo=#{meetingNo}
	</select>
	
	<select id="getCafeMemberList" resultType="HashMap" parameterType="HashMap">
		select cfm.*, u.userName, u.profileImageURL from cafe_members cfm
			left outer join user u on cfm.userID=u.userID
			left outer join cafe_master cm on cm.cafeNo=cfm.cafeNo
		where cm.cafeID=#{cafeID} and cfm.deletedDate is null
		order by cfm.createdDate
		limit 0,5
	</select>
	
	<select id="getCafeMemberListForManage" resultType="HashMap" parameterType="HashMap">
		select cfm.*, u.userName, u.profileImageURL
		, case when cfm.memberType = '카페주인' then 1 
			when cfm.memberType = '운영자' then 2 
			when cfm.memberType = '회원' then 3 
			end as memberTypeOrder
		from cafe_members cfm
			left outer join user u on cfm.userID=u.userID
			left outer join cafe_master cm on cm.cafeNo=cfm.cafeNo
		where cm.cafeID=#{cafeID} and cfm.deletedDate is null
		order by memberTypeOrder, cfm.createdDate
		limit #{startIndex},#{showCount};
	</select>
	
	<select id="getCafeMemberCount" resultType="String" parameterType="HashMap">
		select count(cfm.`no`) as memberCount from cafe_members cfm
			left outer join cafe_master cm on cfm.cafeNo=cm.cafeNo
		where cm.cafeID=#{cafeID} and cfm.deletedDate is null
	</select>
	
	<insert id="insertCafeBoard" parameterType="HashMap">
		insert into cafe_board_master( boardName, cafeNo, boardType, writePermission, createdDate )
		select #{boardName}, cafeNo, #{boardType}, #{writePermission}, NOW() from cafe_master
		where cafeID=#{cafeID}
	</insert>
	
	<update id="updateCafeBoard" parameterType="HashMap">
		update cafe_board_master 
		set boardName=#{boardName}
		, boardType = #{boardType}
		, writePermission = #{writePermission} 
		where boardNo=#{boardNo}
		and cafeNo in ( select cafeNo from cafe_master where cafeID=#{cafeID} )
	</update>
	
	<insert id="deleteCafeBoard" parameterType="HashMap">
		delete from cafe_board_master
		where boardNo = #{boardNo}
		and cafeNo in ( select cafeNo from cafe_master where cafeID= #{cafeID})
	</insert>
	
	<select id="getCafeBoardList" resultType="HashMap" parameterType="HashMap">
		select bm.* from cafe_board_master bm
			left outer join cafe_master cm on cm.cafeNo=bm.cafeNo
		where cm.cafeID=#{cafeID}
	</select>
	
	<select id="getCafeBoardInfo" resultType="HashMap" parameterType="HashMap">
		select bm.* from cafe_board_master bm
		where bm.boardNo = #{boardNo}
	</select>
	
	<select id="getBoardPostList" resultType="HashMap" parameterType="HashMap">
		select bpm.postNo, bpm.title, bpm.boardNo, bpm.userID, ifnull(bpm.readCount,0) as readCount, bpm.noticeYN, 
			ifnull(bpm.replyCount,0) as replyCount, bm.boardName, u.userName, bpm.createdDate
		from cafe_board_post_master bpm
			left outer join cafe_board_master bm on bpm.boardNo=bm.boardNo
			left outer join user u on u.userID = bpm.userID
		where bm.boardNo = #{boardNo}
	</select>
	
	<select id="getCafeBoardPostInfo" resultType="HashMap" parameterType="HashMap">
		select bpm.title, bpm.boardNo, bpm.userID, ifnull(bpm.readCount,0) as readCount, bpm.noticeYN, bpm.postNo,
			ifnull(bpm.replyCount,0) as replyCount, bpm.createdDate
		from cafe_board_post_master bpm
		where bpm.postNo=#{postNo}
	</select>
	
	<select id="getCafeBoardPostContent" resultType="HashMap" parameterType="HashMap">
		select ifnull(cd.content,'') as content, cd.type, 
			concat( ifnull(ci.url1,''), ifnull(ci.url2,'') ) as imageURL 
		from cafe_board_post_detail cd
			left outer join cafe_image ci on ci.imageNo = cd.imageNo
		where postNo = #{postNo}
		order by seq
	</select>
	
	<select id="getCafeBoardPostReplyList" resultType="HashMap" parameterType="HashMap">
		select cpr.*, u.userName from cafe_board_post_reply cpr
			left outer join user u on cpr.userID = u.userID
		where cpr.postNo=#{postNo} and cpr.deletedDate is null
		limit #{startIndex},#{showCount};
	</select>
	
	<select id="getCafeBoardPostImageList" resultType="HashMap" parameterType="HashMap">
		select cm.*, u.userName, bm.boardName, concat( ifnull(ci.url1,'') , ifnull(ci.url2,'') ) as imageURL 
		from cafe_board_post_master cm
			left outer join ( 
				select postNo, imageNo from cafe_board_post_detail where type = 2 
				group by postNo
			) cd on cm.postNo = cd.postNo
			left outer join cafe_image ci on ci.imageNo = cd.imageNo
			left outer join user u on cm.userID = u.userID
			left outer join cafe_board_master bm on bm.boardNo = cm.boardNo
			left outer join cafe_master cfm on cfm.cafeNo = bm.cafeNo
		where cd.imageNo is not null
		and cfm.cafeID=#{cafeID}
		<if test="boardNo != null and boardNo != ''">
			and bm.boardNo=#{boardNo}
		</if>
		order by cm.createdDate desc
		limit #{startIndex},#{showCount};
	</select>
	
	<select id="getCafeBoardPostImageCount" resultType="Integer" parameterType="HashMap">
		select count(cm.postNo) as totalCount from cafe_board_post_master cm
			left outer join ( 
				select postNo, imageNo from cafe_board_post_detail where type = 2 
				group by postNo
			) cd on cm.postNo = cd.postNo
			left outer join cafe_image ci on ci.imageNo = cd.imageNo
			left outer join user u on cm.userID = u.userID
			left outer join cafe_board_master bm on bm.boardNo = cm.boardNo
			left outer join cafe_master cfm on cfm.cafeNo = bm.cafeNo
		where cd.imageNo is not null
		and cfm.cafeID=#{cafeID}
		<if test="boardNo != null and boardNo != ''">
			and bm.boardNo=#{boardNo}
		</if>
	</select>
	
	<insert id="insertCafeMeeting" parameterType="Hashmap">
		insert into cafe_public_meeting_members(meetingNo, userID, createdDate)
		values(#{meetingNo}, #{userID}, NOW());
	</insert>
	
	<delete id="deleteCafeMeeting" parameterType="Hashmap">
		delete from cafe_public_meeting_members
		where meetingNo=#{meetingNo} and userID=#{userID};
	</delete>
	
	<select id="getCafeUserInfo" resultType="HashMap" parameterType="HashMap">
		select u.*
			, case when cm.owner is null then 'N' else 'Y' end ownerYN
			, case when cm2.userID is null then 'N' else 'Y' end memberYN
			, ifnull( cm2.memberType, '' ) as memberType
		from user u
			left outer join cafe_master cm on u.userID=cm.owner
			left outer join cafe_members cm2 on cm2.cafeNo = cm.cafeNo and cm2.userID = #{userID}
		where u.userID=#{userID}
		and cm.cafeID = #{cafeID}
	</select>
	
	<update id="updateCafeMemberType" parameterType="HashMap">
		update cafe_members
		set memberType=#{memberType}
		where userID=#{userID}
		and cafeNo = ( select cafeNo from cafe_master where cafeID=#{cafeID} );
	</update>
	
	<update id="updateMemberAsDeleted" parameterType="HashMap">
		update cafe_members
		set deletedDate = NOW()
		where userID=#{userID}
		and cafeNo = ( select cafeNo from cafe_master where cafeID=#{cafeID} );
	</update>
	
	<update id="updateCafeMasterInfo" parameterType="HashMap">
		update cafe_master
		set cafeName=#{cafeName}
		where cafeID=#{cafeID} 
	</update>
	
	<update id="updateCafePublishYN" parameterType="HashMap">
		update cafe_master
		set publishYN=#{publishYN}
		where cafeID=#{cafeID} 
	</update>
	
	<update id="updateCafeDetailInfo" parameterType="HashMap">
		update cafe_detail
		set mainDesc = #{mainDesc}
		, contactEmail = #{contactEmail}
		, locationNo = #{locationNo}
		where cafeNo = (select cafeNo from cafe_master where cafeID=#{cafeID}) 
	</update>
	
	<!-- 해당 카페 게시판 댓글 삭제 -->
	<delete id="deleteCafeBoardAllPostReplies" parameterType="HashMap">
		delete cbpr
		from cafe_board_post_reply cbpr
			left outer join cafe_board_post_master cbpm on cbpm.postNo=cbpr.postNo
			left outer join cafe_board_master cbm on cbm.boardNo=cbpm.boardNo
			left outer join cafe_master cm on cm.cafeNo = cbm.cafeNo
		where cm.cafeID = #{cafeID}
	</delete>
	
	<!-- 해당 카페 게시판 글 상세내용 삭제 -->
	<delete id="deleteCafeBoardPostDetail" parameterType="HashMap">
		delete cbpd
		from cafe_board_post_detail cbpd
			left outer join cafe_board_post_master cbpm on cbpm.postNo = cbpd.postNo
			left outer join cafe_board_master cbm on cbm.boardNo=cbpm.boardNo
			left outer join cafe_master cm on cm.cafeNo = cbm.cafeNo
		where cm.cafeID = #{cafeID}
	</delete>
	
	<!-- 해당 카페 게시판 글 전체 삭제 -->
	<delete id="deleteCafeBoardAllPosts" parameterType="HashMap">
		delete cbpm
		from cafe_board_post_master cbpm
			left outer join cafe_board_master cbm on cbm.boardNo=cbpm.boardNo
			left outer join cafe_master cm on cm.cafeNo = cbm.cafeNo
		where cm.cafeID = #{cafeID}
	</delete>
	
	<!-- 해당 카페 게시판 전체 삭제 -->
	<delete id="deleteCafeAllBoard" parameterType="HashMap">
		delete cbm
		from cafe_board_master cbm
			left outer join cafe_master cm on cm.cafeNo = cbm.cafeNo
		where cm.cafeID = #{cafeID}
	</delete>
	
	<!-- 해당 카페 detail 삭제 -->
	<delete id="deleteCafeDetail" parameterType="HashMap">
		delete cd
		from cafe_detail cd
			left outer join cafe_master cm on cm.cafeNo = cd.cafeNo
		where cm.cafeID = #{cafeID}
	</delete>
	
	<!-- 해당 카페 master 삭제 -->
	<delete id="deleteCafeMaster" parameterType="HashMap">
		delete from cafe_master
		where cafeID = #{cafeID}
	</delete>
</mapper>