<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tessoft.nearhere.taxi">

	<insert id="insertUserTermsAgreement" parameterType="java.util.HashMap">
		replace into
		user_terms_agreement ( userID, nearhere_ver, personal_ver,
		location_ver, createdDate )
		values (#{userID}, #{nearhere_ver},
		#{personal_ver}, #{location_ver}, NOW());
	</insert>

	<delete id="deleteUserLocation" parameterType="com.nearhere.domain.UserLocation">
		delete from
		user_location
		where userID=#{user.userID}
		and
		locationName=#{locationName}
	</delete>

	<insert id="insertUserLocation" parameterType="com.nearhere.domain.UserLocation">
		insert into
		user_location( userID, locationName, latitude, longitude, address,
		createdDate )
		values ( #{user.userID}, #{locationName} , #{latitude},
		#{longitude}, #{address}, NOW() )
	</insert>

	<select id="login" parameterType="java.util.HashMap" resultType="com.nearhere.domain.User">
		select * FROM user where userID = #{userID} and password =
		#{password};
	</select>

	<select id="selectUserByUserNo" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.User">
		select * FROM user where userNo = #{userNo};
	</select>

	<select id="selectUser" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.User">
		select * FROM user where userID = #{userID};
	</select>

	<insert id="insertUser" parameterType="com.nearhere.domain.User"
		useGeneratedKeys="true" keyProperty="userNo" keyColumn="userNo">
		INSERT INTO user ( userID, userName, password, createdDate )
		VALUES(
		#{userID}, #{userName}, #{password}, NOW() );
		<selectKey keyProperty="userNo" resultType="String" order="AFTER">
			select LAST_INSERT_ID();
		</selectKey>
	</insert>

	<update id="updateUserID" parameterType="com.nearhere.domain.User">
		update user set
		userID=#{userID}
		where userNo=#{userNo};
	</update>

	<insert id="insertPost" parameterType="com.nearhere.domain.Post"
		useGeneratedKeys="true" keyProperty="postID" keyColumn="postID">
		insert into post( userID, type, message, content, fromLatitude,
		fromLongitude, fromAddress,
		latitude, longitude, toAddress, sexInfo,
		numOfUsers, departureDate, departureTime, createdDate)
		values(#{user.userID}, 'taxi', #{message}, #{content},
		#{fromLatitude}, #{fromLongitude},
		#{fromAddress}, #{latitude},
		#{longitude}, #{toAddress}, #{sexInfo}, #{numOfUsers},
		#{departureDate}, #{departureTime}, NOW() );
		<selectKey keyProperty="postID" resultType="String" order="AFTER">
			select LAST_INSERT_ID();
		</selectKey>
	</insert>

	<update id="updatePost" parameterType="com.nearhere.domain.Post">
		replace into post( postID,
		userID, type, message, content, fromLatitude, fromLongitude,
		fromAddress,
		latitude, longitude, toAddress, sexInfo, numOfUsers,
		departureDate, departureTime, createdDate)
		values( #{postID},
		#{user.userID}, 'taxi', #{message}, #{content}, #{fromLatitude},
		#{fromLongitude},
		#{fromAddress}, #{latitude}, #{longitude},
		#{toAddress}, #{sexInfo}, #{numOfUsers}, #{departureDate},
		#{departureTime}, NOW() );
	</update>

	<update id="updatePostAsDeleted" parameterType="com.nearhere.domain.Post">
		update post set
		deletedDate=NOW()
		where postID=#{postID}
	</update>

	<update id="updatePostReplyAsDeleted" parameterType="com.nearhere.domain.PostReply">
		update
		post_reply set deletedDate=NOW()
		where replyID=#{replyID}
	</update>

	<select id="getPostsNearHere" resultType="com.nearhere.domain.Post"
		parameterType="java.util.HashMap">
		SELECT
		*
		FROM (
		SELECT P.postID, P.userID, type, message, content,
		fromLatitude,
		fromLongitude, fromAddress,
		latitude, longitude,
		toAddress, reward, P.createdDate,
		P.userID as 'user.userID',
		U.profileImageURL as 'user.profileImageURL',
		U.userName as
		'user.userName', U.sex as 'user.sex',
		YEAR(NOW())-YEAR(U.birthday)+1 as
		'user.age'
		, PR.cnt as "replyCount",
		sexInfo, numOfUsers, departureDate,
		departureTime
		<if test="fromLatitude != null and fromLongitude != null">
			,TRUNCATE((
			6371 * acos ( cos ( radians( #{fromLatitude} ) )
			* cos( radians( fromLatitude ) )
			* cos( radians( fromLongitude ) - radians( #{fromLongitude} ) )
			+ sin ( radians( #{fromLatitude} ) )
			* sin( radians( fromLatitude ) )
			)
			) , 1) AS fromDistance
		</if>
		<if test="toLatitude != null and toLongitude != null">
			,TRUNCATE((
			6371 * acos ( cos ( radians( #{toLatitude} ) )
			* cos( radians( latitude ) )
			* cos( radians( longitude ) - radians( #{toLongitude} ) )
			+ sin ( radians( #{toLatitude} ) )
			* sin( radians( latitude ) )
			)
			) , 1) AS toDistance
		</if>
		,status
		FROM post P
		left outer join (select count(replyID) as 'cnt', postID
		from post_reply
		where deletedDate is null group by postID ) PR on P.postID=PR.postID
		left outer join user U on P.userID=U.userID
		WHERE fromLatitude is not null
		and fromLongitude is not null
		and type='taxi'
		and deletedDate is null
		) A
		WHERE 1=1
		<if test="postID != null">
		and postID=#{postID}
		</if>
		<if test="fromLatitude != null and fromLongitude != null and fromDistance != null">
		AND A.fromDistance &lt;= #{fromDistance}
		</if>
		<if test="toLatitude != null and toLongitude != null and toDistance != null">
		AND A.toDistance &lt;= #{toDistance}
		</if>
		<if test="status != null">
		AND A.status = #{status}
		</if>
		<choose>
			<when test="fromLatitude != null and fromLongitude != null and toLatitude != null and toLongitude != null">
				order by A.status desc, toDistance, fromDistance, createdDate desc
			</when>
			<when test="fromLatitude != null and fromLongitude != null">
				order by A.status desc, fromDistance, createdDate desc
			</when>
			<when test="toLatitude != null and toLongitude != null">
				order by A.status desc, toDistance,
				createdDate desc
			</when>
			<otherwise>order by createdDate desc</otherwise>
		</choose>
		LIMIT 0 , 100;
	</select>

	<select id="getPostDetail" resultType="com.nearhere.domain.Post"
		parameterType="java.util.HashMap">
		<![CDATA[
		SELECT 
			P.*,
			TRUNCATE((
    			6371 * acos ( cos ( radians( #{latitude} ) )
	      		* cos( radians( fromLatitude ) )
  	 	   		* cos( radians( fromLongitude ) - radians( #{longitude} ) )
   		   		+ sin ( radians( #{latitude} ) )
   		   		* sin( radians( fromLatitude ) )
   		 		)
  				) , 1)  AS distance,
			U.userID as "user.userID",
			U.userName as "user.userName",
			U.profileImageURL as "user.profileImageURL",
			U.sex as "user.sex"
		FROM post P
				left outer join user U on P.userID=U.userID
		where type='taxi'
		and postID=#{postID};
		]]>
	</select>

	<select id="insertPostReply" parameterType="com.nearhere.domain.PostReply">
		insert into
		post_reply( postID, userID, message, latitude, longitude, createdDate,
		type )
		values(#{postID}, #{user.userID}, #{message}, #{latitude},
		#{longitude}, NOW(), 'taxi' );
	</select>

	<select id="getPostReplies" resultType="com.nearhere.domain.PostReply"
		parameterType="com.nearhere.domain.Post">
		<![CDATA[
		SELECT 
			PR.*,
			U.userID as "user.userID",
			U.userName as "user.userName",
			U.profileImageURL as "user.profileImageURL",
			TRUNCATE((
    			6371 * acos ( cos ( radians( #{fromLatitude} ) )
	      		* cos( radians( latitude ) )
  	 	   		* cos( radians( longitude ) - radians( #{fromLongitude} ) )
   		   		+ sin ( radians( #{fromLatitude} ) )
   		   		* sin( radians( latitude ) )
   		 		)
  				) , 1)  AS distance
		FROM post_reply PR
			left outer join user U on PR.userID=U.userID
		where PR.postID=#{postID}
		and PR.deletedDate is null
		order by PR.createdDate;
		]]>
	</select>

	<select id="selectUserPost" resultType="com.nearhere.domain.Post"
		parameterType="com.nearhere.domain.User">
		<![CDATA[
		select P.*,
			U.userID as 'user.userID',
			U.userName as 'user.userName',
			U.profileImageURL as 'user.profileImageURL' 
		from post P
			left outer join user U on P.userID=U.userID
		where P.userID=#{userID} and P.type='taxi'
		and P.deletedDate is null;
		]]>
	</select>

	<select id="selectPostsUserReplied" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.Post">
		select P.*,
		U.userID as 'user.userID',
		U.userName as
		'user.userName',
		U.profileImageURL as 'user.profileImageURL'
		from post P
		left outer join user U on P.userID=U.userID
		where postID in (
		select
		postID from post_reply where userID=#{userID} and deletedDate is null
		)
		and P.type='taxi'
		and P.deletedDate is null;
	</select>

	<select id="searchUsers" parameterType="java.util.HashMap"
		resultType="com.nearhere.domain.User">
		<![CDATA[
		SELECT * FROM (
			SELECT *, TRUNCATE((
    			6371 * acos ( cos ( radians( #{latitude} ) )
	      		* cos( radians( latitude ) )
  	 	   		* cos( radians( longitude ) - radians( #{longitude} ) )
   		   		+ sin ( radians( #{latitude} ) )
   		   		* sin( radians( latitude ) )
   		 		)
  				) , 1)  AS distance
			FROM (
				select UL.*, U.userName, U.regID 
				from user_location UL
					LEFT OUTER JOIN user U ON UL.userID=U.userID
				where locationName='현재위치'
			) A
			WHERE latitude is not null
			and longitude is not null
			ORDER BY distance
		) A
		WHERE A.distance <= 0.5
		and A.regID is not null
		and A.userID <> #{userID}
		LIMIT 0 , 100;
		]]>
	</select>

	<select id="selectUserLocation" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.UserLocation">
		select *
		from user_location
		where userID=#{userID}
	</select>

	<update id="updateUserSex" parameterType="com.nearhere.domain.User">
		update user set
		sex=#{sex}
		where userID=#{userID};
	</update>

	<update id="updateUserJobTitle" parameterType="com.nearhere.domain.User">
		update user set
		jobTitle=#{jobTitle}
		where userID=#{userID};
	</update>

	<update id="updateUserBirthday" parameterType="com.nearhere.domain.User">
		update user set
		birthday=#{birthday}
		where userID=#{userID};
	</update>

	<select id="selectNoticeList" resultType="com.nearhere.domain.Notice">
		select * from
		notice_list
		order by createdDate desc;
	</select>

	<select id="selectUserMessageList" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.UserMessage">
		select A.userID as 'user.userID', U.userName as
		'user.userName', U.profileImageURL as 'user.profileImageURL',
		A.message, A.createdDate, A.isRead
		from (
		select fromUserID as 'userID',
		message, createdDate,
		(
		CASE isRead
		WHEN 'Y' THEN 'true'
		WHEN 'N' THEN
		'false'
		END
		)AS isRead
		from user_message
		where toUserID=#{userID}
		union all
		select toUserID as 'userID', message, createdDate, 'true' AS 'isRead'
		from user_message
		where fromUserID=#{userID}
		) A
		left outer join user U
		on A.userID=U.userID
		order by A.createdDate desc;
	</select>

	<select id="selectUserMessage" parameterType="java.util.HashMap"
		resultType="com.nearhere.domain.UserMessage">
		select
		UM.messageID,
		UM.fromUserID as 'fromUser.userID',
		U.userName as 'fromUser.userName',
		U.profileImageURL as
		'fromUser.profileImageURL',
		UM.toUserID as 'toUser.userID',
		U2.userName
		as 'toUser.userName',
		U2.profileImageURL as 'toUser.profileImageURL',
		UM.message,
		(
		CASE UM.isRead
		WHEN 'Y' THEN 'true'
		WHEN 'N' THEN 'false'
		END
		)AS isRead,
		UM.createdDate
		from
		(
		select messageID, fromUserID,
		toUserID, message, isRead, createdDate
		from user_message
		where
		toUserID=#{userID}
		and fromUserID=#{fromUserID}
		union all
		select
		messageID, fromUserID, toUserID, message, isRead, createdDate
		from
		user_message
		where toUserID=#{fromUserID}
		and fromUserID=#{userID}
		order
		by createdDate desc limit 0,100
		) UM
		left outer join user U on
		UM.fromUserID=U.userID
		left outer join user U2 on UM.toUserID=U2.userID
		order by UM.createdDate
	</select>

	<select id="selectUserPushMessage" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.UserPushMessage">
		select *
		from user_push_message
		where toUserID=#{userID}
		order by createdDate desc;
	</select>

	<select id="selectUserSetting" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.UserSetting">
		select *
		from user_setting
		where userID=#{userID}
	</select>

	<insert id="updateUserSetting" parameterType="com.nearhere.domain.UserSetting">
		replace into
		user_setting( userID, messagePushReceiveYN, replyPushReceiveYN,
		recommendPushReceiveYN, createdDate )
		values (#{userID},
		#{messagePushReceiveYN}, #{replyPushReceiveYN},
		#{recommendPushReceiveYN}, NOW() );
	</insert>

	<update id="updateUserRegID" parameterType="com.nearhere.domain.User">
		update user
		set
		regID=#{regID}
		where userID=#{userID};
	</update>

	<update id="updateUserRegIDAsNull" parameterType="com.nearhere.domain.User">
		update user
		set
		regID=NULL
		where regID=#{regID};
	</update>

	<insert id="insertUserMessage" parameterType="com.nearhere.domain.UserMessage">
		insert into
		user_message( fromUserID, toUserID, message, isRead, createdDate )
		values(#{fromUser.userID},#{toUser.userID}, #{message}, 'N', NOW());
	</insert>

	<insert id="insertUserPushMessage" parameterType="com.nearhere.domain.UserMessage">
		insert into
		user_push_message( toUserID, message, isRead, type, param1,
		createdDate )
		values(#{toUserID},#{message}, 'N', #{type}, #{param1},
		NOW());
	</insert>

	<select id="selectUsersForPost" parameterType="com.nearhere.domain.Post"
		resultType="com.nearhere.domain.User">
		<![CDATA[
			select U.userID, U.regID
			from (
				select userID from post where postID=#{postID}
				union
				select userID from post_reply
				where postID=#{postID}
				and deletedDate is null
			) A
				left outer join user U on A.userID=U.userID
			where A.userID <> #{user.userID}
			and U.regID is not null;
		]]>
	</select>

	<select id="getUnreadCount" parameterType="java.util.HashMap"
		resultType="java.util.HashMap">
		<![CDATA[
			select sum(messageCount) as 'messageCount', sum(pushCount) as 'pushCount' 
			from (
				select count(messageID) as 'messageCount', 0 as 'pushCount' from user_message where toUserID=#{userID} and isRead = 'N'
            	union all
            	select 0 as 'messageCount', count(pushNo) as 'pushCount' from user_push_message where toUserID=#{userID} and isRead = 'N'
  			) A;
		]]>
	</select>

	<update id="updatePushMessageAsRead" parameterType="com.nearhere.domain.UserPushMessage">
		update
		user_push_message set isRead='Y' where pushNo=#{pushNo};
	</update>

	<update id="updateUserMessageAsRead" parameterType="java.util.HashMap">
		update
		user_message set isRead='Y' where toUserID=#{userID} and
		fromUserID=#{fromUserID};
	</update>

	<update id="updatePushMessageAsRead2" parameterType="java.util.HashMap">
		update
		user_push_message set isRead='Y' where toUserID=#{userID} and
		param1=#{fromUserID};
	</update>

	<update id="updatePushMessageAsRead3" parameterType="java.util.HashMap">
		update
		user_push_message set isRead='Y' where toUserID=#{userID} and
		param1=#{postID};
	</update>

	<update id="updateUserInfo" parameterType="com.nearhere.domain.User">
		update user set
		sex=#{sex}, userName=#{userName}, mobileNo=#{mobileNo}
		where userID=#{userID};
	</update>

	<update id="updateUserProfileImage" parameterType="java.util.HashMap">
		update user
		set profileImageURL=#{profileImageURL}
		where userID=#{userID};
	</update>

	<select id="selectProfilePoint" parameterType="com.nearhere.domain.User"
		resultType="String">
		select sum( credit ) as 'profilePoint' from (
		select 25 as
		'credit' from user where userID=#{userID} and profileImageURL
		is not
		null
		union all
		select 10 as 'credit' from user where userID=#{userID}
		and birthday is not
		null
		union all
		select 20 as 'credit' from user
		left
		outer join user_location ul on user.userID=ul.userID and
		ul.locationName='집'
		where user.userID=#{userID}
		and ul.userID is not
		null
		union all
		select 20 as 'credit' from user
		left outer join
		user_location ul on user.userID=ul.userID and
		ul.locationName='직장'
		where user.userID=#{userID}
		and ul.userID is not null
		union all
		select 15
		as 'credit' from user where userID=#{userID} and jobTitle is not
		null
		union all
		select 10
		as 'credit' from user where userID=#{userID} and mobileNo is not
		null
		)
		A
	</select>
</mapper>