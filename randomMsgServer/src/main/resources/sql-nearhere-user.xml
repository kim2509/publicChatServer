<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tessoft.nearhere.user">

	<update id="updateUserAsDeleted" parameterType="java.util.HashMap">
		update user set
		isDeleted='Y'
		, deletedDateTime = NOW()
		where userID=#{userID};
	</update>
	
	<select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
		SELECT 
			userNo
			, userID
			, userName
			, type
			, profileImageURL
			, birthday
			, facebookID
			, facebookURL
			, kakaoID
			, jobTitle
			, sex
			, appVersion
			, regID
		from user
		where userID=#{value}
	</select>
	
	<select id="getUserLocation" parameterType="String" resultType="java.util.HashMap">
		SELECT 
			*
		from user_location
		where userID=#{value}
	</select>
	
	<select id="getFriendList" parameterType="String" resultType="java.util.HashMap">
		SELECT 
			userNo
			, userID
			, userName
			, type
			, profileImageURL
			, birthday
			, facebookID
			, facebookURL
			, kakaoID
			, jobTitle
			, sex
		from user
		where userID in (
			SELECT 
				friend_one
			from friends
			where friend_two=#{value} and status = 1
			union
			SELECT 
				friend_two
			from friends
			where friend_one=#{value} and status = 1
		)
		and isDeleted is null
		limit 0, 3;
	</select>
	
	<select id="getAllFriendList" parameterType="String" resultType="java.util.HashMap">
		SELECT 
			userNo
			, userID
			, userName
			, type
			, profileImageURL
			, birthday
			, facebookID
			, facebookURL
			, kakaoID
			, jobTitle
			, sex
		from user
		where userID in (
			SELECT 
				friend_one
			from friends
			where friend_two=#{value} and status = 1
			union
			SELECT 
				friend_two
			from friends
			where friend_one=#{value} and status = 1
		)
		and isDeleted is null
		limit 0, 50;
	</select>
	
	<select id="getUserPushMessage" parameterType="String"
		resultType="java.util.HashMap">
		<![CDATA[
			select *
			from user_push_message
			where toUserID=#{value}
			and type <> 'message'
			and isRead = 'N'
			order by createdDate desc;
		]]>
	</select>
	
	<select id="getRegisterAvailableCheck1" parameterType="HashMap" resultType="java.util.HashMap">
		<![CDATA[
			select *
			from user u
			where userNo <> #{userNo} and userID=#{userID}
		]]>
	</select>
	
	<select id="getRegisterAvailableCheck2" parameterType="HashMap" resultType="java.util.HashMap">
		<![CDATA[
			select *
			from user u
			where userNo=#{userNo} and userID=#{userID}
		]]>
	</select>
	
	<update id="updateUser" parameterType="java.util.HashMap">
		update user
		set updatedDate = NOW()
		<if test="userName != null and userName != ''">
		, userName = #{userName}
		</if>
		<if test="password != null and password != ''">
		, password = #{password}
		</if>
		<if test="sex != null and sex != ''">
		, sex = #{sex}
		</if>
		<if test="email != null and email != ''">
		, email = #{email}
		</if>
		<if test="mobileNo != null and mobileNo != ''">
		, mobileNo = #{mobileNo}
		</if>
		<if test="type != null and type != ''">
		, type = #{type}
		</if>
		<if test="profileImageURL != null and profileImageURL != ''">
		, profileImageURL = #{profileImageURL}
		</if>
		<if test="registerUserFinished != null and registerUserFinished != ''">
		, registerUserFinished = #{profileImageURL}
		</if>
		<if test="regID != null and regID != ''">
		, regID = #{regID}
		</if>
		where userNo=#{userNo}
	</update>
	
	<update id="updateUserAppVersion" parameterType="java.util.HashMap">
		update user
		set appVersion=#{AppVersion}
		where userID=#{userID}
	</update>
	
	<select id="selectUserByUserToken" resultType="java.util.HashMap" parameterType="String">
		select ut.seed, ut.hash, ut.expireDate, ut.activeYN, u.*
		from user_token ut
			left outer join user u on ut.userID = u.userID
		where ut.hash = #{value}
		and u.isDeleted is null
	</select>
	
	<update id="updateUserPushMessageAsRead" parameterType="java.util.HashMap">
		update user_push_message set
		isRead = 'Y'
		where toUserID=#{userID} and pushNo = #{pushNo};
	</update>
	
	<update id="updateAllUserPushMessageAsRead" parameterType="java.util.HashMap">
		update user_push_message set
		isRead = 'Y'
		where toUserID=#{userID};
	</update>
	
	<update id="updateUserID" parameterType="HashMap">
		update user
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_1" parameterType="HashMap">
		update cafe_board_post_history
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_2" parameterType="HashMap">
		update cafe_board_post_master
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_3" parameterType="HashMap">
		update cafe_board_post_reply
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_4" parameterType="HashMap">
		update cafe_members
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_5" parameterType="HashMap">
		update cafe_public_meeting_members
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_6" parameterType="HashMap">
		update event_apply
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_7" parameterType="HashMap">
		update location_history
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_8" parameterType="HashMap">
		update location_master
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_9" parameterType="HashMap">
		update new_post_push_data
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_10" parameterType="HashMap">
		update post
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_11" parameterType="HashMap">
		update post_like
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_12" parameterType="HashMap">
		update post_read_history
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_13" parameterType="HashMap">
		update post_reply
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_14" parameterType="HashMap">
		update user
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_15" parameterType="HashMap">
		update user_favorite_region
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_16" parameterType="HashMap">
		update user_location
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_17" parameterType="HashMap">
		update user_message
		set toUserID=#{userID}
		where toUserID=#{oldUserID}
	</update>
	
	<update id="updateUserID_18" parameterType="HashMap">
		update user_message
		set fromUserID=#{userID}
		where fromUserID=#{oldUserID}
	</update>
	
	<update id="updateUserID_19" parameterType="HashMap">
		update user_push_message
		set toUserID=#{userID}
		where toUserID=#{oldUserID}
	</update>
	
	<update id="updateUserID_21" parameterType="HashMap">
		update user_setting
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_22" parameterType="HashMap">
		update user_terms_agreement
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_23" parameterType="HashMap">
		update user_token
		set userID=#{userID}
		where userID=#{oldUserID}
	</update>
	
	<update id="updateUserID_24" parameterType="HashMap">
		update friends
		set friend_one=#{userID}
		where friend_one=#{oldUserID}
	</update>
	
	<update id="updateUserID_25" parameterType="HashMap">
		update friends
		set friend_two=#{userID}
		where friend_two=#{oldUserID}
	</update>
	
	<insert id="insertUserToken" parameterType="java.util.HashMap">
		insert into user_token( userID, seed, hash, expireDate, activeYN, createdDate )
		values ( #{userID}, #{seed}, #{hash}, NOW() + INTERVAL 20 DAY, 'Y', NOW() );
	</insert>
	
	<delete id="deleteUserToken" parameterType="java.util.HashMap">
		delete from user_token where userID=#{userID}
	</delete>
	
	<select id="getLoginInfo" parameterType="HashMap"
		resultType="java.util.HashMap">
		<![CDATA[
			select u.*
			from user u
				left outer join user_token ut on u.userID=ut.userID
			where u.userID=#{loginID}
			and u.password = #{password}
			and ut.hash=#{userToken}
		]]>
	</select>
	
	<select id="getIDFind" parameterType="HashMap"
		resultType="java.util.HashMap">
		<![CDATA[
			select u.*
			from user u
			where userName=#{userName}
			and email=#{email}
		]]>
	</select>
	
	<select id="getPasswordFind" parameterType="HashMap"
		resultType="java.util.HashMap">
		<![CDATA[
			select u.*
			from user u
			where userID=#{userID}
			and email=#{email}
		]]>
	</select>
	
	<update id="updateUserPassword" parameterType="java.util.HashMap">
		update user
		set password=#{password}
		where userID=#{userID}
	</update>
	
	<select id="selectUser" parameterType="com.nearhere.domain.User"
		resultType="com.nearhere.domain.User">
		select u.*, ut.hash as userToken
		FROM user u
			left outer join user_token ut on u.userID= ut.userID
		where u.userID = #{userID};
	</select>
	
	<select id="selectProfilePoint" parameterType="com.nearhere.domain.User"
		resultType="String">
		select sum( credit ) as 'profilePoint'
		from (
		select 30 as
		'credit' from user where facebookID is not null and registerUserFinished = 'Y' and userID=#{userID}
		union all
		
		select 20 as
		'credit' from user where kakaoID is not null and registerUserFinished = 'Y' and userID=#{userID}
		union all
		
		select 10 as 'credit' from user where userID=#{userID}
		and birthday is not null
		union all
		
		select 15 as 'credit' from user
		left outer join user_location ul on user.userID=ul.userID and
		ul.locationName='집'
		where user.userID=#{userID}
		and ul.userID is not null
		union all
		
		select 15 as 'credit' from user
		left outer join user_location ul on user.userID=ul.userID and
		ul.locationName='직장'
		where user.userID=#{userID}
		and ul.userID is not null
		union all
		
		select 10 as 'credit' from user where userID=#{userID} and jobTitle is not
		null
		union all
		
		select 0 as 'credit'
		) A
	</select>
	
</mapper>